// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gateway.proto

#ifndef PROTOBUF_INCLUDED_gateway_2eproto
#define PROTOBUF_INCLUDED_gateway_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gateway_2eproto 

namespace protobuf_gateway_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_gateway_2eproto
namespace moos {
namespace gateway {
class FromGateway;
class FromGatewayDefaultTypeInternal;
extern FromGatewayDefaultTypeInternal _FromGateway_default_instance_;
class ToGateway;
class ToGatewayDefaultTypeInternal;
extern ToGatewayDefaultTypeInternal _ToGateway_default_instance_;
}  // namespace gateway
}  // namespace moos
namespace google {
namespace protobuf {
template<> ::moos::gateway::FromGateway* Arena::CreateMaybeMessage<::moos::gateway::FromGateway>(Arena*);
template<> ::moos::gateway::ToGateway* Arena::CreateMaybeMessage<::moos::gateway::ToGateway>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace moos {
namespace gateway {

// ===================================================================

class FromGateway : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:moos.gateway.FromGateway) */ {
 public:
  FromGateway();
  virtual ~FromGateway();

  FromGateway(const FromGateway& from);

  inline FromGateway& operator=(const FromGateway& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FromGateway(FromGateway&& from) noexcept
    : FromGateway() {
    *this = ::std::move(from);
  }

  inline FromGateway& operator=(FromGateway&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FromGateway& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FromGateway* internal_default_instance() {
    return reinterpret_cast<const FromGateway*>(
               &_FromGateway_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(FromGateway* other);
  friend void swap(FromGateway& a, FromGateway& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FromGateway* New() const final {
    return CreateMaybeMessage<FromGateway>(NULL);
  }

  FromGateway* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FromGateway>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FromGateway& from);
  void MergeFrom(const FromGateway& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FromGateway* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string gateway_key = 2;
  bool has_gateway_key() const;
  void clear_gateway_key();
  static const int kGatewayKeyFieldNumber = 2;
  const ::std::string& gateway_key() const;
  void set_gateway_key(const ::std::string& value);
  #if LANG_CXX11
  void set_gateway_key(::std::string&& value);
  #endif
  void set_gateway_key(const char* value);
  void set_gateway_key(const char* value, size_t size);
  ::std::string* mutable_gateway_key();
  ::std::string* release_gateway_key();
  void set_allocated_gateway_key(::std::string* gateway_key);

  // optional string gateway_string = 3;
  bool has_gateway_string() const;
  void clear_gateway_string();
  static const int kGatewayStringFieldNumber = 3;
  const ::std::string& gateway_string() const;
  void set_gateway_string(const ::std::string& value);
  #if LANG_CXX11
  void set_gateway_string(::std::string&& value);
  #endif
  void set_gateway_string(const char* value);
  void set_gateway_string(const char* value, size_t size);
  ::std::string* mutable_gateway_string();
  ::std::string* release_gateway_string();
  void set_allocated_gateway_string(::std::string* gateway_string);

  // optional double gateway_time = 1;
  bool has_gateway_time() const;
  void clear_gateway_time();
  static const int kGatewayTimeFieldNumber = 1;
  double gateway_time() const;
  void set_gateway_time(double value);

  // optional double gateway_double = 4;
  bool has_gateway_double() const;
  void clear_gateway_double();
  static const int kGatewayDoubleFieldNumber = 4;
  double gateway_double() const;
  void set_gateway_double(double value);

  // @@protoc_insertion_point(class_scope:moos.gateway.FromGateway)
 private:
  void set_has_gateway_time();
  void clear_has_gateway_time();
  void set_has_gateway_key();
  void clear_has_gateway_key();
  void set_has_gateway_string();
  void clear_has_gateway_string();
  void set_has_gateway_double();
  void clear_has_gateway_double();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr gateway_key_;
  ::google::protobuf::internal::ArenaStringPtr gateway_string_;
  double gateway_time_;
  double gateway_double_;
  friend struct ::protobuf_gateway_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ToGateway : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:moos.gateway.ToGateway) */ {
 public:
  ToGateway();
  virtual ~ToGateway();

  ToGateway(const ToGateway& from);

  inline ToGateway& operator=(const ToGateway& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ToGateway(ToGateway&& from) noexcept
    : ToGateway() {
    *this = ::std::move(from);
  }

  inline ToGateway& operator=(ToGateway&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToGateway& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ToGateway* internal_default_instance() {
    return reinterpret_cast<const ToGateway*>(
               &_ToGateway_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ToGateway* other);
  friend void swap(ToGateway& a, ToGateway& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ToGateway* New() const final {
    return CreateMaybeMessage<ToGateway>(NULL);
  }

  ToGateway* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ToGateway>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ToGateway& from);
  void MergeFrom(const ToGateway& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToGateway* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string client_key = 2;
  bool has_client_key() const;
  void clear_client_key();
  static const int kClientKeyFieldNumber = 2;
  const ::std::string& client_key() const;
  void set_client_key(const ::std::string& value);
  #if LANG_CXX11
  void set_client_key(::std::string&& value);
  #endif
  void set_client_key(const char* value);
  void set_client_key(const char* value, size_t size);
  ::std::string* mutable_client_key();
  ::std::string* release_client_key();
  void set_allocated_client_key(::std::string* client_key);

  // optional string client_string = 3;
  bool has_client_string() const;
  void clear_client_string();
  static const int kClientStringFieldNumber = 3;
  const ::std::string& client_string() const;
  void set_client_string(const ::std::string& value);
  #if LANG_CXX11
  void set_client_string(::std::string&& value);
  #endif
  void set_client_string(const char* value);
  void set_client_string(const char* value, size_t size);
  ::std::string* mutable_client_string();
  ::std::string* release_client_string();
  void set_allocated_client_string(::std::string* client_string);

  // optional double client_time = 1;
  bool has_client_time() const;
  void clear_client_time();
  static const int kClientTimeFieldNumber = 1;
  double client_time() const;
  void set_client_time(double value);

  // optional double client_double = 4;
  bool has_client_double() const;
  void clear_client_double();
  static const int kClientDoubleFieldNumber = 4;
  double client_double() const;
  void set_client_double(double value);

  // @@protoc_insertion_point(class_scope:moos.gateway.ToGateway)
 private:
  void set_has_client_time();
  void clear_has_client_time();
  void set_has_client_key();
  void clear_has_client_key();
  void set_has_client_string();
  void clear_has_client_string();
  void set_has_client_double();
  void clear_has_client_double();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr client_key_;
  ::google::protobuf::internal::ArenaStringPtr client_string_;
  double client_time_;
  double client_double_;
  friend struct ::protobuf_gateway_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FromGateway

// optional double gateway_time = 1;
inline bool FromGateway::has_gateway_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FromGateway::set_has_gateway_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FromGateway::clear_has_gateway_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FromGateway::clear_gateway_time() {
  gateway_time_ = 0;
  clear_has_gateway_time();
}
inline double FromGateway::gateway_time() const {
  // @@protoc_insertion_point(field_get:moos.gateway.FromGateway.gateway_time)
  return gateway_time_;
}
inline void FromGateway::set_gateway_time(double value) {
  set_has_gateway_time();
  gateway_time_ = value;
  // @@protoc_insertion_point(field_set:moos.gateway.FromGateway.gateway_time)
}

// optional string gateway_key = 2;
inline bool FromGateway::has_gateway_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FromGateway::set_has_gateway_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FromGateway::clear_has_gateway_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FromGateway::clear_gateway_key() {
  gateway_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gateway_key();
}
inline const ::std::string& FromGateway::gateway_key() const {
  // @@protoc_insertion_point(field_get:moos.gateway.FromGateway.gateway_key)
  return gateway_key_.GetNoArena();
}
inline void FromGateway::set_gateway_key(const ::std::string& value) {
  set_has_gateway_key();
  gateway_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:moos.gateway.FromGateway.gateway_key)
}
#if LANG_CXX11
inline void FromGateway::set_gateway_key(::std::string&& value) {
  set_has_gateway_key();
  gateway_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:moos.gateway.FromGateway.gateway_key)
}
#endif
inline void FromGateway::set_gateway_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gateway_key();
  gateway_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:moos.gateway.FromGateway.gateway_key)
}
inline void FromGateway::set_gateway_key(const char* value, size_t size) {
  set_has_gateway_key();
  gateway_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:moos.gateway.FromGateway.gateway_key)
}
inline ::std::string* FromGateway::mutable_gateway_key() {
  set_has_gateway_key();
  // @@protoc_insertion_point(field_mutable:moos.gateway.FromGateway.gateway_key)
  return gateway_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FromGateway::release_gateway_key() {
  // @@protoc_insertion_point(field_release:moos.gateway.FromGateway.gateway_key)
  if (!has_gateway_key()) {
    return NULL;
  }
  clear_has_gateway_key();
  return gateway_key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FromGateway::set_allocated_gateway_key(::std::string* gateway_key) {
  if (gateway_key != NULL) {
    set_has_gateway_key();
  } else {
    clear_has_gateway_key();
  }
  gateway_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gateway_key);
  // @@protoc_insertion_point(field_set_allocated:moos.gateway.FromGateway.gateway_key)
}

// optional string gateway_string = 3;
inline bool FromGateway::has_gateway_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FromGateway::set_has_gateway_string() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FromGateway::clear_has_gateway_string() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FromGateway::clear_gateway_string() {
  gateway_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gateway_string();
}
inline const ::std::string& FromGateway::gateway_string() const {
  // @@protoc_insertion_point(field_get:moos.gateway.FromGateway.gateway_string)
  return gateway_string_.GetNoArena();
}
inline void FromGateway::set_gateway_string(const ::std::string& value) {
  set_has_gateway_string();
  gateway_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:moos.gateway.FromGateway.gateway_string)
}
#if LANG_CXX11
inline void FromGateway::set_gateway_string(::std::string&& value) {
  set_has_gateway_string();
  gateway_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:moos.gateway.FromGateway.gateway_string)
}
#endif
inline void FromGateway::set_gateway_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gateway_string();
  gateway_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:moos.gateway.FromGateway.gateway_string)
}
inline void FromGateway::set_gateway_string(const char* value, size_t size) {
  set_has_gateway_string();
  gateway_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:moos.gateway.FromGateway.gateway_string)
}
inline ::std::string* FromGateway::mutable_gateway_string() {
  set_has_gateway_string();
  // @@protoc_insertion_point(field_mutable:moos.gateway.FromGateway.gateway_string)
  return gateway_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FromGateway::release_gateway_string() {
  // @@protoc_insertion_point(field_release:moos.gateway.FromGateway.gateway_string)
  if (!has_gateway_string()) {
    return NULL;
  }
  clear_has_gateway_string();
  return gateway_string_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FromGateway::set_allocated_gateway_string(::std::string* gateway_string) {
  if (gateway_string != NULL) {
    set_has_gateway_string();
  } else {
    clear_has_gateway_string();
  }
  gateway_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gateway_string);
  // @@protoc_insertion_point(field_set_allocated:moos.gateway.FromGateway.gateway_string)
}

// optional double gateway_double = 4;
inline bool FromGateway::has_gateway_double() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FromGateway::set_has_gateway_double() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FromGateway::clear_has_gateway_double() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FromGateway::clear_gateway_double() {
  gateway_double_ = 0;
  clear_has_gateway_double();
}
inline double FromGateway::gateway_double() const {
  // @@protoc_insertion_point(field_get:moos.gateway.FromGateway.gateway_double)
  return gateway_double_;
}
inline void FromGateway::set_gateway_double(double value) {
  set_has_gateway_double();
  gateway_double_ = value;
  // @@protoc_insertion_point(field_set:moos.gateway.FromGateway.gateway_double)
}

// -------------------------------------------------------------------

// ToGateway

// optional double client_time = 1;
inline bool ToGateway::has_client_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ToGateway::set_has_client_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ToGateway::clear_has_client_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ToGateway::clear_client_time() {
  client_time_ = 0;
  clear_has_client_time();
}
inline double ToGateway::client_time() const {
  // @@protoc_insertion_point(field_get:moos.gateway.ToGateway.client_time)
  return client_time_;
}
inline void ToGateway::set_client_time(double value) {
  set_has_client_time();
  client_time_ = value;
  // @@protoc_insertion_point(field_set:moos.gateway.ToGateway.client_time)
}

// optional string client_key = 2;
inline bool ToGateway::has_client_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ToGateway::set_has_client_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ToGateway::clear_has_client_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ToGateway::clear_client_key() {
  client_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_key();
}
inline const ::std::string& ToGateway::client_key() const {
  // @@protoc_insertion_point(field_get:moos.gateway.ToGateway.client_key)
  return client_key_.GetNoArena();
}
inline void ToGateway::set_client_key(const ::std::string& value) {
  set_has_client_key();
  client_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:moos.gateway.ToGateway.client_key)
}
#if LANG_CXX11
inline void ToGateway::set_client_key(::std::string&& value) {
  set_has_client_key();
  client_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:moos.gateway.ToGateway.client_key)
}
#endif
inline void ToGateway::set_client_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_client_key();
  client_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:moos.gateway.ToGateway.client_key)
}
inline void ToGateway::set_client_key(const char* value, size_t size) {
  set_has_client_key();
  client_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:moos.gateway.ToGateway.client_key)
}
inline ::std::string* ToGateway::mutable_client_key() {
  set_has_client_key();
  // @@protoc_insertion_point(field_mutable:moos.gateway.ToGateway.client_key)
  return client_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ToGateway::release_client_key() {
  // @@protoc_insertion_point(field_release:moos.gateway.ToGateway.client_key)
  if (!has_client_key()) {
    return NULL;
  }
  clear_has_client_key();
  return client_key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ToGateway::set_allocated_client_key(::std::string* client_key) {
  if (client_key != NULL) {
    set_has_client_key();
  } else {
    clear_has_client_key();
  }
  client_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_key);
  // @@protoc_insertion_point(field_set_allocated:moos.gateway.ToGateway.client_key)
}

// optional string client_string = 3;
inline bool ToGateway::has_client_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ToGateway::set_has_client_string() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ToGateway::clear_has_client_string() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ToGateway::clear_client_string() {
  client_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_string();
}
inline const ::std::string& ToGateway::client_string() const {
  // @@protoc_insertion_point(field_get:moos.gateway.ToGateway.client_string)
  return client_string_.GetNoArena();
}
inline void ToGateway::set_client_string(const ::std::string& value) {
  set_has_client_string();
  client_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:moos.gateway.ToGateway.client_string)
}
#if LANG_CXX11
inline void ToGateway::set_client_string(::std::string&& value) {
  set_has_client_string();
  client_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:moos.gateway.ToGateway.client_string)
}
#endif
inline void ToGateway::set_client_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_client_string();
  client_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:moos.gateway.ToGateway.client_string)
}
inline void ToGateway::set_client_string(const char* value, size_t size) {
  set_has_client_string();
  client_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:moos.gateway.ToGateway.client_string)
}
inline ::std::string* ToGateway::mutable_client_string() {
  set_has_client_string();
  // @@protoc_insertion_point(field_mutable:moos.gateway.ToGateway.client_string)
  return client_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ToGateway::release_client_string() {
  // @@protoc_insertion_point(field_release:moos.gateway.ToGateway.client_string)
  if (!has_client_string()) {
    return NULL;
  }
  clear_has_client_string();
  return client_string_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ToGateway::set_allocated_client_string(::std::string* client_string) {
  if (client_string != NULL) {
    set_has_client_string();
  } else {
    clear_has_client_string();
  }
  client_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_string);
  // @@protoc_insertion_point(field_set_allocated:moos.gateway.ToGateway.client_string)
}

// optional double client_double = 4;
inline bool ToGateway::has_client_double() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ToGateway::set_has_client_double() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ToGateway::clear_has_client_double() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ToGateway::clear_client_double() {
  client_double_ = 0;
  clear_has_client_double();
}
inline double ToGateway::client_double() const {
  // @@protoc_insertion_point(field_get:moos.gateway.ToGateway.client_double)
  return client_double_;
}
inline void ToGateway::set_client_double(double value) {
  set_has_client_double();
  client_double_ = value;
  // @@protoc_insertion_point(field_set:moos.gateway.ToGateway.client_double)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gateway
}  // namespace moos

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gateway_2eproto
